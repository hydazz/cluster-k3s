---
{{- with .Values.immich }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: immich
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: immich
      app.kubernetes.io/name: immich
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: postgresql-appdata
      labels:
        app.kubernetes.io/instance: immich
        app.kubernetes.io/name: immich
    spec:
      containers:
        - name: immich
          image: {{ .image }}
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: PUID
              value: "1001"
            - name: PGID
              value: "1001"
            - name: TZ
              value: "Australia/Melbourne"
            - name: DB_HOSTNAME
              value: "localhost"
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_DATABASE_NAME
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secrets
                  key: DB_PASSWORD
            - name: REDIS_HOSTNAME
              value: "localhost"
          resources:
{{ toYaml .resources | indent 12 }}
          ports:
            - name: web
              containerPort: 8080
          volumeMounts:
            - name: nfs-media-immich
              mountPath: /photos
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            timeoutSeconds: 2
            tcpSocket:
              port: 8080
          startupProbe:
            failureThreshold: 10
            timeoutSeconds: 2
            tcpSocket:
              port: 8080

        - name: redis
          image: {{ .redis.image }}
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          resources:
            {{- toYaml .redis.resources | indent 12 }}
          ports:
            - containerPort: 6379

        - name: pgvecto-rs
          image: {{ .pgvectors.image }}
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          resources:
            {{- toYaml .pgvectors.resources | indent 12 }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgresql-appdata
              mountPath: /var/lib/postgresql/data

      restartPolicy: Always
      volumes:
        - name: postgresql-appdata
          persistentVolumeClaim:
            claimName: immich-pg-appdata-pvc
        - name: nfs-media-immich
          nfs:
            path: "/mnt/Slow/Media/Immich"
            server: "10.0.3.7"

---
apiVersion: v1
kind: Service
metadata:
  name: immich-svc # name create variable called IMMICH_PORT inside the container which conflicts
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    app.kubernetes.io/instance: immich
    app.kubernetes.io/name: immich
  ports:
    - name: immich-svc
      protocol: TCP
      port: 8080

{{- end }}
